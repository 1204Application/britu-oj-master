/*
-- Query: SELECT * FROM ojdb.answer
LIMIT 0, 1000

-- Date: 2020-08-11 10:45
*/
INSERT INTO `` (`pid`,`answer_c`,`answer_cpro`,`answer_java`,`answer_python2`,`answer_python3`,`problem_name`) VALUES (1000,'<p>1.我们在打代码时应该行首对齐，最好不要顶格，因为以后代码太长会很乱。\n2.注意每句末尾加上分号 \" 这其实相当于我们C语言中的句号，说活不能一口气一直说下去，要合理添加句号。</p>\n<pre style=\"height: 183.33px;\"><code class=\"mali\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> a,b;\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d\"</span>,&amp;a,&amp;b);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, a+b);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>','<p>其实iostream就是 input output stream输入输出流，主要用cin标准输入流函数和cout标准输出流函数。用法如下：cin&gt;&gt;输入的数据变量名称;（注意分号）cout&lt;&lt;输出数据变量名称;（注意分号）或者cout&lt;&lt;输出数据变量名称&lt;&lt;endl;（注意分号）</p>\n<pre style=\"height: 253px;\"><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> a,b;\n    <span class=\"hljs-built_in\">cin</span> &gt;&gt; a &gt;&gt; b;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; a+b;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>','<p>这里用到了Scanner类，这个类是SDK1.5新增的一个类，它可以直接输入整型数据，不像JAVA其他从键盘输入的方法只能输入字符或字符串，非常方便。</p>\n<pre style=\"height: 381px;\"><code class=\"language-java hljs\"><span class=\"hljs-keyword\">import</span> java.util.Scanner;  \n  \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span> </span>{ \n    \n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Scanner sc;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    Scanner(<span class=\"hljs-number\">0</span>);\n} \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Scanner</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> sum)</span></span>{ \n    sc = <span class=\"hljs-keyword\">new</span> Scanner(System.in); \n    <span class=\"hljs-keyword\">int</span> a = sc.nextInt();\n    <span class=\"hljs-keyword\">int</span> b = sc.nextInt();\n    <span class=\"hljs-keyword\">int</span> c;\n    c = a + b;\n    System.out.println(c); \n	} \n}\n</code></pre>','<p>Python万能的运算看起来比C++的的算法要简单得多。但我看见过很多人用Python成功RE爆零的，原因是Python在一行上检测到空格时不会将前面的内容储存进变量，而是会将一整行内容转成字符串，自然会RE。本方法是将输入先以字符串格式读入变量string，再以空格为依据用split()函数进行分片，产生一个字符型的列表，再用int()函数将两个字符转为数，相加，再输出它们的和。</p>\n<pre style=\"height: 92px;\"><code class=\"hljs lisp\">string=input()\n\nprint(<span class=\"hljs-name\">int</span>(<span class=\"hljs-name\">string</span>.split(<span class=\"hljs-string\">\" \"</span>)[<span class=\"hljs-number\">0</span>])+int(<span class=\"hljs-name\">string</span>.split(<span class=\"hljs-string\">\" \"</span>)[<span class=\"hljs-number\">1</span>]))\n</code></pre>',NULL,'A + B problem');
INSERT INTO `` (`pid`,`answer_c`,`answer_cpro`,`answer_java`,`answer_python2`,`answer_python3`,`problem_name`) VALUES (1001,'<p>认真想一想就能明白，其实各自掉头与穿过对方时间是一模一样的！我们不妨算直接穿过对方的，比较简单。<br>\n我非常好奇为什么你们的代码都这么长——————</p>\n<pre style = \"height: 609px; \"><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">float</span> j,k,D=<span class=\"hljs-number\">0</span>,X=<span class=\"hljs-number\">5000</span>;\n    <span class=\"hljs-keyword\">int</span> n,m,i;\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%f\"</span>,&amp;j);\n    j=(j+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,&amp;n);\n    <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">0</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"0 0\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)\n    {\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%f\"</span>,&amp;k);\n        <span class=\"hljs-keyword\">if</span>(k&gt;=j)\n        k=k-j;\n        <span class=\"hljs-keyword\">else</span>\n        k=j-k;\n        <span class=\"hljs-keyword\">if</span>(k&lt;X)\n        X=k;\n        <span class=\"hljs-keyword\">if</span>(k&gt;D)\n        D=k;\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%.f %.f\"</span>,j-X,j+D);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>','<p>首先自行脑补一下，假装你正在20000米高空的轰炸机上用高倍<s>显微镜</s>望远镜默默欣赏士兵离开，你会发现什么东西？一堆花花绿绿的迷彩服在移动。（不是鬼片！不是鬼片！不是鬼片！重要的事情说三遍）</p>\n<p>那么当两个士兵撞在一起时，从你的视角看会发生什么？当然他们认为他们都掉头了，但因为你在特高的地方，你会认为他们“穿过”了对方。换言之，这与他们相互穿过并没有任何区别。</p>\n<p>然后我们就可以把士兵分开了。比方说有一个士兵在位置3，开始时向右，那么一定有一个士兵在两秒后在位置5。虽然这两个家伙可能不是同一个人，但由于士兵都是相同的，我们可以认为他们相同。</p>\n<p>那么我们就可以把所有士兵分开。首先，我们把他们一个个读进去。然后，对于每一个士兵，他有向左和向右两种选择。设士兵在位置p，如果向左，需要p时间单位；向右，需要L-p+1个。分别取max和min，更新答案即可。</p>\n<pre style=\"height: 361px;\"><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> n,l,p,maxv=<span class=\"hljs-number\">0</span>,minv=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d\"</span>,&amp;l,&amp;n);\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)\n    {\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,&amp;p);\n        maxv=max(maxv,max(l-p+<span class=\"hljs-number\">1</span>,p));\n        minv=max(minv,min(l-p+<span class=\"hljs-number\">1</span>,p));\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d %d\"</span>,minv,maxv);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>',NULL,'<p>当你看人当做一群蚂蚁过独木桥时，你根本分不清他是否掉头，既然分不清楚，就干脆不要分开，将两个人作为一个整体，</p>\n<p>等价于两人穿插而过！</p>\n<p>你会发现总时间和速度都是一样的！</p>\n<p>一样就好办了，</p>\n<p>又是一句话：最大值的最大值！！</p>\n<p>max（a[i],len-a[i]+1）;</p>\n<pre style = \"height: 733px;\"><code class=\"language-cpp hljs\">var\n  n,m,i,j,len,maxmin,maxmax,m1:longint;\n  a:<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">1.</span><span class=\"hljs-number\">.100000</span>] of longint;\n<span class=\"hljs-comment\">//maxmin、maxmax是最小的最大和最大最大</span>\n<span class=\"hljs-function\">function <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(a,b:longint)</span>:longint</span>;\nbegin\n  <span class=\"hljs-keyword\">if</span> a&lt;<span class=\"hljs-function\">b then <span class=\"hljs-title\">exit</span><span class=\"hljs-params\">(a)</span></span>;\n  <span class=\"hljs-built_in\">exit</span>(b);\nend;\n<span class=\"hljs-function\">function <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(a,b:longint)</span>:longint</span>;\nbegin\n  <span class=\"hljs-keyword\">if</span> a&gt;<span class=\"hljs-function\">b then <span class=\"hljs-title\">exit</span><span class=\"hljs-params\">(a)</span></span>;\n  <span class=\"hljs-built_in\">exit</span>(b);\nend;\n<span class=\"hljs-function\">begin\n  <span class=\"hljs-title\">readln</span><span class=\"hljs-params\">(len)</span></span>;\n  readln(n);\n  <span class=\"hljs-keyword\">for</span> i:=<span class=\"hljs-number\">1</span> to n <span class=\"hljs-keyword\">do</span>\n    read(a[i]);\n  <span class=\"hljs-keyword\">for</span> i:=<span class=\"hljs-number\">1</span> to n <span class=\"hljs-keyword\">do</span>\n  begin\n    m:=min(a[i],len+<span class=\"hljs-number\">1</span>-a[i]);\n    <span class=\"hljs-keyword\">if</span> m&gt;maxmin then\n      maxmin:=m;\n  end;\n  <span class=\"hljs-keyword\">for</span> i:=<span class=\"hljs-number\">1</span> to n <span class=\"hljs-keyword\">do</span>\n  begin\n    m1:=max(a[i],len+<span class=\"hljs-number\">1</span>-a[i]);<span class=\"hljs-comment\">//都不做解释，题解说明有</span>\n    <span class=\"hljs-keyword\">if</span> m1&gt;maxmax then\n      maxmax:=m1;\n  end;\n  writeln(maxmin,<span class=\"hljs-string\">\' \'</span>,maxmax);\nend.\n\n</code></pre>',NULL,'独木桥');
INSERT INTO `` (`pid`,`answer_c`,`answer_cpro`,`answer_java`,`answer_python2`,`answer_python3`,`problem_name`) VALUES (1002,'<p>我们数组先开大一点，接下来我们就需要输入数据了。利用一个for循环来完成，并且储存在数组中。</p>\n<pre style=\"height: 423px;\"><code class=\"language-c hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n	<span class=\"hljs-keyword\">int</span> i,n,x[<span class=\"hljs-number\">10005</span>],y[<span class=\"hljs-number\">10005</span>],a[<span class=\"hljs-number\">10005</span>],b[<span class=\"hljs-number\">10005</span>],x1,y1,k=<span class=\"hljs-number\">1</span>;\n	<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,&amp;n);\n	<span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)\n		<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d%d%d\"</span>,&amp;x[i],&amp;y[i],&amp;a[i],&amp;b[i]);\n	<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d\"</span>,&amp;x1,&amp;y1);\n	<span class=\"hljs-keyword\">for</span>(i=n<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--)\n	{\n	    <span class=\"hljs-keyword\">if</span>((x1&gt;=x[i]&amp;&amp;x1&lt;=x[i]+a[i])&amp;&amp;(y1&gt;=y[i]&amp;&amp;y1&lt;=y[i]+b[i]))\n		{    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\\n\"</span>,i+<span class=\"hljs-number\">1</span>); k*=<span class=\"hljs-number\">0</span>;}\n		<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">continue</span>;\n		<span class=\"hljs-keyword\">if</span>((x1&gt;=x[i]&amp;&amp;x1&lt;=x[i]+a[i])&amp;&amp;(y1&gt;=y[i]&amp;&amp;y1&lt;=y[i]+b[i]))\n	        <span class=\"hljs-keyword\">break</span>;\n	}\n	<span class=\"hljs-keyword\">if</span>(k==<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"-1\\n\"</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>','<p>其实这道题，有些题解的方法有些复杂。我们可以有一些投机取巧，因为，是看特定的某个位置上最后一块覆盖了的地毯。所以说，你可以从最后一个输入的数据开始排查，如果说你找到了这个点上面有地毯，那么就直接输出这个值，如果没找到就按照题干的意思输出-1。</p>\n<pre style=\"height: 729px;\"><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-keyword\">int</span> shuzu[<span class=\"hljs-number\">10001</span>][<span class=\"hljs-number\">10001</span>];<span class=\"hljs-comment\">//自定义一个二维数组，内存看自己。</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> n,x,y;\n    <span class=\"hljs-keyword\">int</span> b=<span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-built_in\">cin</span>&gt;&gt;n;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;++i)\n    {\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> ii=<span class=\"hljs-number\">1</span>;ii&lt;=<span class=\"hljs-number\">4</span>;++ii)\n        <span class=\"hljs-built_in\">cin</span>&gt;&gt;shuzu[i][ii];                               <span class=\"hljs-comment\">//输入数据</span>\n    }\n    <span class=\"hljs-built_in\">cin</span>&gt;&gt;x&gt;&gt;y;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> q=n;q&gt;=<span class=\"hljs-number\">1</span>;--q)\n    {\n        <span class=\"hljs-keyword\">if</span>((shuzu[q][<span class=\"hljs-number\">1</span>]&lt;=x)&amp;&amp;(shuzu[q][<span class=\"hljs-number\">3</span>]+shuzu[q][<span class=\"hljs-number\">1</span>]&gt;=x)&amp;&amp;(shuzu[q][<span class=\"hljs-number\">2</span>]&lt;=y)&amp;&amp;(shuzu[q][<span class=\"hljs-number\">2</span>]+shuzu[q][<span class=\"hljs-number\">4</span>]&gt;=y))    <span class=\"hljs-comment\">//比较，如果包含了，就继续。</span>\n        {\n            <span class=\"hljs-built_in\">cout</span>&lt;&lt;q;\n        b=<span class=\"hljs-number\">2</span>    ;\n        }\n        <span class=\"hljs-keyword\">if</span>(b==<span class=\"hljs-number\">2</span>)\n        <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">if</span>(q==<span class=\"hljs-number\">1</span>)\n        {\n            <span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-number\">-1</span>;\n        <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n总之这道题不算难，如果把题看懂了，就可以做了。做法会用一点投机，但是第二次就AC了，每有什么超时的问题。\n</code></pre>',NULL,'<p>直接判断4个点的边界即可</p>\n<pre style=\"height: 423px; \"><code class=\"language-delphi hljs\">\n\n<span class=\"hljs-keyword\">var</span> a,b,c,d,e,f,g,x,y,n,m,i,j:longint;\n    ab:<span class=\"hljs-keyword\">array</span> [<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">10001</span>,<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">4</span>]<span class=\"hljs-keyword\">of</span> longint;\n<span class=\"hljs-keyword\">begin</span>\n <span class=\"hljs-keyword\">read</span>(a);\n <span class=\"hljs-keyword\">for</span> i:=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">to</span> a <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-keyword\">read</span>(ab[i,<span class=\"hljs-number\">1</span>],ab[i,<span class=\"hljs-number\">2</span>],ab[i,<span class=\"hljs-number\">3</span>],ab[i,<span class=\"hljs-number\">4</span>]);\n <span class=\"hljs-keyword\">read</span>(x,y);\n <span class=\"hljs-keyword\">for</span> i:=a <span class=\"hljs-keyword\">downto</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-keyword\">if</span> (x&gt;=ab[i,<span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">and</span> (x&lt;=ab[i,<span class=\"hljs-number\">3</span>]+ab[i,<span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">and</span> (y&gt;=ab[i,<span class=\"hljs-number\">2</span>]) <span class=\"hljs-keyword\">and</span> (y&lt;=ab[i,<span class=\"hljs-number\">4</span>]+ab[i,<span class=\"hljs-number\">2</span>]) <span class=\"hljs-keyword\">then</span>\n   <span class=\"hljs-keyword\">begin</span>\n    <span class=\"hljs-keyword\">write</span>(i);\n    <span class=\"hljs-keyword\">exit</span>;\n   <span class=\"hljs-keyword\">end</span>;\n <span class=\"hljs-keyword\">write</span>(-<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-keyword\">end</span>.\n\n\n</code></pre>',NULL,'铺地毯');
