/*
-- Query: SELECT * FROM ojdb.problem
LIMIT 0, 1000

-- Date: 2020-08-11 10:37
*/
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1000,'A+B Problem','输入两个整数a,b，输出它们的和(|a|,|b|<=10^9)。\n\n注意\n\npascal使用integer会爆掉哦！\n有负数哦！\nc/c++的main函数必须是int类型，而且最后要return 0。这不仅对洛谷其他题目有效，而且也是noip/noi比赛的要求！\n好吧，同志们，我们就从这一题开始，向着大牛的路进发。\n\n任何一个伟大的思想，都有一个微不足道的开始。','<p>输入两个整数a,b，输出它们的和(|a|,|b|&lt;=10^9)。</p>\n<p>注意</p>\n<p>pascal使用integer会爆掉哦！<br>有负数哦！<br>c/c++的main函数必须是int类型，而且最后要return 0。这不仅对洛谷其他题目有效，而且也是noip/noi比赛的要求！<br>好吧，同志们，我们就从这一题开始，向着大牛的路进发。\n<p>任何一个伟大的思想，都有一个微不足道的开始。</p>\n','两个整数以空格分开','一个数','20 30','50',1,116,84,0,2,0,19,8,3,100,12312,0,'2020-07-21 17:56:35','2020-07-21 17:57:23');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1001,'独木桥','战争已经进入到紧要时间。你是运输小队长，正在率领运输部队向前线运送物资。运输任务像做题一样的无聊。你希望找些刺激，于是命令你的士兵们到前方的一座独木桥上欣赏风景，而你留在桥下欣赏士兵们。士兵们十分愤怒，因为这座独木桥十分狭窄，只能容纳1个人通过。假如有2个人相向而行在桥上相遇，那么他们2个人将无妨绕过对方，只能有1个人回头下桥，让另一个人先通过。但是，可以有多个人同时呆在同一个位置。”。','<p>战争已经进入到紧要时间。你是运输小队长，正在率领运输部队向前线运送物资。运输任务像做题一样的无聊。你希望找些刺激，于是命令你的士兵们到前方的一座独木桥上欣赏风景，而你留在桥下欣赏士兵们。士兵们十分愤怒，因为这座独木桥十分狭窄，只能容纳1个人通过。假如有2个人相向而行在桥上相遇，那么他们2个人将无妨绕过对方，只能有1个人回头下桥，让另一个人先通过。但是，可以有多个人同时呆在同一个位置。</p><p>突然，你收到从指挥部发来的信息，敌军的轰炸机正朝着你所在的独木桥飞来！为了安全，你的部队必须撤下独木桥。独木桥的长度为L，士兵们只能呆在坐标为整数的地方。所有士兵的速度都为1，但一个士兵某一时刻来到了坐标为0或L+1的位置，他就离开了独木桥。</p><p>每个士兵都有一个初始面对的方向，他们会以匀速朝着这个方向行走，中途不会自己改变方向。但是，如果两个士兵面对面相遇，他们无法彼此通过对方，于是就分别转身，继续行走。转身不需要任何的时间。</p><p>由于先前的愤怒，你已不能控制你的士兵。甚至，你连每个士兵初始面对的方向都不知道。因此，你想要知道你的部队最少需要多少时间就可能全部撤离独木桥。另外，总部也在安排阻拦敌人的进攻，因此你还需要知道你的部队最多需要多少时间才能全部撤离独木桥。</p>','<p>第一行：一个整数L，表示独木桥的长度。桥上的坐标为1…L</p><p>第二行：一个整数N，表示初始时留在桥上的士兵数目</p><p>第三行：有N个整数，分别表示每个士兵的初始坐标。</p>','<p>只有一行，输出2个整数，分别表示部队撤离独木桥的最小时间和最大时间。2个整数由一个空格符分开。</p>\n','4\n2\n1 3','2 4',2,50,22,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-07-25 00:46:23');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1002,'铺地毯','为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有 n 张地毯，编号从 1 到 n。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。','<p>为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有 n 张地毯，编号从 1 到 n。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。</p><p>地毯铺设完成后，组织者想知道覆盖地面某个点的最上面的那张地毯的编号。注意：在矩形地毯边界和四个顶点上的点也算被地毯覆盖。</p>','<p>输入共 n + 2 行。</p><p>第一行，一个整数 n，表示总共有 n 张地毯。</p><p>接下来的 n 行中，第 i+1 行表示编号 i 的地毯的信息，包含四个整数 a ,b ,g ,k，每两个整数之间用一个空格隔开，分别表示铺设地毯的左下角的坐标 (a, b) 以及地毯在 x 轴和 y 轴方向的长度。</p><p>第 n + 2 行包含两个整数 x 和 y，表示所求的地面的点的坐标 (x, y)。</p>','<p>输出共 11 行，一个整数，表示所求的地毯的编号；若此处没有被地毯覆盖则输出 -1。<p>\n','3\n1 0 2 3\n0 2 3 3\n2 1 3 3\n2 2','3',2,181,65,0,0,0,3,0,0,1000,128000,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1003,'过河卒','棋盘上 A 点有一个过河卒，需要走到目标 B 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 C 点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。','<p>棋盘上 A 点有一个过河卒，需要走到目标 B 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 C 点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。</p><p>棋盘用坐标表示，A 点 (0, 0)、B 点 (n, m)，同样马的位置坐标是需要给出的。</p><p>现在要求你计算出卒从 A 点能够到达 B 点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。</p>','<p>一行四个正整数，分别表示 B 点坐标和马的坐标。</p>','<p>一个整数，表示所有的路径条数。</p>\n','6 6 3 3','6',2,146,46,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1004,'方格取数','设有 N×N 的方格图 (N≤9)，我们将其中的某些方格中填入正整数，而其他的方格中则放入数字 0。如下图所示（见样例）:','<p>设有 N×N 的方格图 (N≤9)，我们将其中的某些方格中填入正整数，而其他的方格中则放入数字 0。如下图所示（见样例）:</p>\n<pre style=\"height: 236px; overflow: hidden;\">\n<style>\n	.hljs-number{\n		color: #bd4147;\n    }\n</style>\n<code>A\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">13</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">6</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">7</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">14</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">21</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">15</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">14</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n                         B\n</code>\n</pre>\n<p>某人从图的左上角的 A 点出发，可以向下行走，也可以向右走，直到到达右下角的 B 点。在走过的路上，他可以取走方格中的数（取走后的方格中将变为数字 0）。<br>\n此人从 A 点到 B 点共走两次，试找出 2 条这样的路径，使得取得的数之和为最大。</p>','<p>输入的第一行为一个整数 N（表示 N×N 的方格图），接下来的每行有三个整数，前两个表示位置，第三个数为该位置上所放的数。一行单独的 0 表示输入结束。</p>','<p>只需输出一个整数，表示 2 条路径上取得的最大的和。</p>','8\n2 3 13\n2 6 6\n3 5 7\n4 4 14\n5 2 21\n5 6 4\n6 3 15\n7 2 14\n0 0 0','67',3,49,24,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-07-25 00:46:23');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1005,'矩阵取数游戏','帅帅经常跟同学玩一个矩阵取数游戏：对于一个给定的 n×m 的矩阵，矩阵中的每个元素 a[i][j]	均为非负整数。游戏规则如下：','<p>帅帅经常跟同学玩一个矩阵取数游戏：对于一个给定的 n×m 的矩阵，矩阵中的每个元素 a[i][j]	均为非负整数。游戏规则如下：</p>\n<ol style=\"line-height: 18px;\">\n	<style>li{list-style:decimal;}</style>\n	<li>每次取数时须从每行各取走一个元素，共 n 个。经过 m 次后取完矩阵内所有元素；</li>\n	<li>每次取走的各个元素只能是该元素所在行的行首或行尾；</li>\n	<li>每次取数都有一个得分值，为每行取数的得分之和，每行取数的得分 = 被取走的元素值 ×2^i  ，其中 i 表示第 i 次取数（从 1 开始编号）；</li>\n	<li>游戏结束总得分为 m 次取数得分之和。</li>\n</ol>\n<p>帅帅想请你帮忙写一个程序，对于任意矩阵，可以求出取数后的最大得分。</p>','<p>输入文件包括 n+1 行：</p>\n<p>第一行为两个用空格隔开的整数 n 和 m。</p>\n<p>第 2∽n+1 行为 n×m 矩阵，其中每行有 m 个用单个空格隔开的非负整数。</p>','<p>输出文件仅包含1行，为一个整数，即输入矩阵取数后的最大得分。</p>','2 3\n1 2 3\n3 4 2','82',3,44,13,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1006,'传纸条','小渊和小轩是好朋友也是同班同学，他们在一起总有谈不完的话题。一次素质拓展活动中，班上同学安排做成一个 mm 行 nn 列的矩阵，而小渊和小轩被安排在矩阵对角线的两端，因此，他们就无法直接交谈了。幸运的是，他们可以通过传纸条来进行交流。纸条要经由许多同学传到对方手里，小渊坐在矩阵的左上角，坐标 (1,1)，小轩坐在矩阵的右下角，坐标 (m,n)。从小渊传到小轩的纸条只可以向下或者向右传递，从小轩传给小渊的纸条只可以向上或者向左传递。','<p>小渊和小轩是好朋友也是同班同学，他们在一起总有谈不完的话题。一次素质拓展活动中，班上同学安排做成一个 mm 行 nn 列的矩阵，而小渊和小轩被安排在矩阵对角线的两端，因此，他们就无法直接交谈了。幸运的是，他们可以通过传纸条来进行交流。纸条要经由许多同学传到对方手里，小渊坐在矩阵的左上角，坐标 (1,1)，小轩坐在矩阵的右下角，坐标 (m,n)。从小渊传到小轩的纸条只可以向下或者向右传递，从小轩传给小渊的纸条只可以向上或者向左传递。</p>\n<p>在活动进行中，小渊希望给小轩传递一张纸条，同时希望小轩给他回复。班里每个同学都可以帮他们传递，但只会帮他们一次，也就是说如果此人在小渊递给小轩纸条的时候帮忙，那么在小轩递给小渊的时候就不会再帮忙。反之亦然。</p>\n<p>还有一件事情需要注意，全班每个同学愿意帮忙的好感度有高有低（注意：小渊和小轩的好心程度没有定义，输入时用 0 表示），可以用一个 [0,100] 内的自然数来表示，数越大表示越好心。小渊和小轩希望尽可能找好心程度高的同学来帮忙传纸条，即找到来回两条传递路径，使得这两条路径上同学的好心程度之和最大。现在，请你帮助小渊和小轩找到这样的两条路径。</p>','<p>第一行有两个用空格隔开的整数 m 和 n，表示班里有 m 行 n 列。</p>\n<p>接下来的 m 行是一个 m×n 的矩阵，矩阵中第 i 行 j 列的整数表示坐在第 i 行 j 列的学生的好心程度。每行的 n 个整数之间用空格隔开。</p>','<p>输出文件共一行一个整数，表示来回两条路上参与传递纸条的学生的好心程度之和的最大值。</p>','3 3\n0 3 9\n2 8 5\n5 7 0','34',3,55,25,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1007,'三连击','将1,2,⋯,9共9个数分成3组，分别组成3个三位数，且使这3个三位数构成1:2:3的比例，试求出所有满足条件的3个三位数。','<p>将1,2,⋯,9共9个数分成3组，分别组成3个三位数，且使这3个三位数构成1:2:3的比例，试求出所有满足条件的3个三位数。</p>','<p>木有输入</p>','<p>若干行，每行3个数字。按照每行第1个数字升序排列。</p>','无','192 384 576\n* * *\n. . .\n* * *\n(输出被和谐了)',2,218,97,0,0,0,3,0,0,1000,64000,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1008,'阶乘之和','用高精度计算出S=1!+2!+3!+…+n!(n≤50)','<p>用高精度计算出S=1!+2!+3!+…+n!(n≤50)</p>\n<p>其中“!”表示阶乘，例如：5!=5×4×3×2×1。</p>','<p>一个正整数N。</p>','<p>一个正整数S，表示计算结果。</p>','3','9',2,95,25,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1009,'进制位','著名科学家卢斯为了检查学生对进位制的理解，他给出了如下的一张加法表，表中的字母代表数字。 例如：','<p>著名科学家卢斯为了检查学生对进位制的理解，他给出了如下的一张加法表，表中的字母代表数字。 例如：</p>\n<pre><code class=\"language-cpp hljs\">+    L    K    V    E\nL    L    K    V    E\nK    K    V    E    KL\nV    V    E    KL    KK\nE    E    KL    KK     KV\n</code></pre>\n<p>其含义为：</p>\n<p>L+L=L，L+K=K，L+V=V，L+E=E</p>\n<p>K+L=K，K+K=V，K+V=E，K+E=KL</p>\n<p>…… E+E=KV</p>\n<p>根据这些规则可推导出：L=0，K=1，V=2，E=3</p>\n<p>同时可以确定该表表示的是4进制加法</p>','<p>n (n≤9)表示行数。</p>\n<p>以下n行，每行包括n个字符串，每个字串间用空格隔开。（字串仅有一个为‘+’号，其它都由大写字母组成）</p>','<p>各个字母表示什么数，格式如：L=0，K=1，……按给出的字母顺序。</p>\n<p>加法运算是几进制的。</p>\n<p>若不可能组成加法表，则应输出“ERROR!”</p>','5\n+ L K V E\nL L K V E\nK K V E KL\nV V E KL KK\neE E KL KK KV','L=0 K=1 V=2 E=3\n4',3,9,3,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1010,'拼数','设有 n 个正整数a[1]...a[n] ，将它们联接成一排，相邻数字首尾相接，组成一个最大的整数。','<p>设有 n 个正整数a[1]...a[n] ，将它们联接成一排，相邻数字首尾相接，组成一个最大的整数。</p>','<p>第一行有一个整数，表示数字个数 n。</p>\n<p>第二行有 n 个整数，表示给出的 n 个整数 a[i]。</p>','<p>一个正整数，表示最大的整数</p>','3\n13 312 343','34331213',2,70,33,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1011,'邮票面值设计',NULL,NULL,NULL,NULL,NULL,NULL,3,76,30,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-05 10:08:18');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1012,'车站',NULL,NULL,NULL,NULL,NULL,NULL,2,66,57,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1013,'幂次方',NULL,NULL,NULL,NULL,NULL,NULL,2,65,45,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1014,'旅行家的预算',NULL,NULL,NULL,NULL,NULL,NULL,3,76,58,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1015,'回文数',NULL,NULL,NULL,NULL,NULL,NULL,2,55,34,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1016,'一元三次方程求解',NULL,NULL,NULL,NULL,NULL,NULL,1,66,43,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1017,'统计单词个数',NULL,NULL,NULL,NULL,NULL,NULL,3,90,67,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-05 10:12:55');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1018,'数的划分',NULL,NULL,NULL,NULL,NULL,NULL,2,86,49,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1019,'求先序排列',NULL,NULL,NULL,NULL,NULL,NULL,2,67,45,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1020,'最大公约数和最小公倍数问题',NULL,NULL,NULL,NULL,NULL,NULL,2,78,49,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1021,'矩形覆盖',NULL,NULL,NULL,NULL,NULL,NULL,3,89,78,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1022,'级数求和',NULL,NULL,NULL,NULL,NULL,NULL,1,56,34,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-05 10:12:55');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1023,'神经网络',NULL,NULL,NULL,NULL,NULL,NULL,3,56,37,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1024,'侦探推理',NULL,NULL,NULL,NULL,NULL,NULL,3,67,54,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1025,'加分二叉树',NULL,NULL,NULL,NULL,NULL,NULL,3,78,65,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1026,'传染病控制',NULL,NULL,NULL,NULL,NULL,NULL,3,65,48,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1027,'乒乓球',NULL,NULL,NULL,NULL,NULL,NULL,2,89,60,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1028,'数字游戏',NULL,NULL,NULL,NULL,NULL,NULL,3,779,500,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1029,'栈',NULL,NULL,NULL,NULL,NULL,NULL,2,123,99,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1030,'麦森数',NULL,NULL,NULL,NULL,NULL,NULL,3,109,79,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1031,'校门外的树',NULL,NULL,NULL,NULL,NULL,NULL,1,78,57,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-05 10:12:55');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1032,'装箱问题',NULL,NULL,NULL,NULL,NULL,NULL,2,67,43,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1034,'谁拿了最多奖学金',NULL,NULL,NULL,NULL,NULL,NULL,2,89,70,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1038,'低洼地','3123','<p>3123</p>\n','123','213','213','2131',1,55,33,0,0,0,0,0,0,10000,262144,0,'2020-07-21 14:16:50','2020-08-05 10:14:42');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1039,'222222','2222222222![](http://file.gkuoj.com/image/ming/blog/1557311340073.jpg)\n````java\n @Override\n    @Transactional(rollbackFor = Exception.class)\n    public RestResponseVO insert(ProblemRequest problemRequest) {\n        if (problemRequest == null) {\n            return RestResponseVO.createByErrorEnum(RestResponseEnum.INVALID_REQUEST);\n        }\n        Problem problem = new Problem();\n        BeanUtil.copyPropertiesIgnoreNull(problemRequest,problem);\n        int effect = problemMapper.insertSelective(problem);\n        if (effect > 0) {\n            String tags = problemRequest.getTags();\n            boolean result = insertTags(problem.getId(), tags);\n            return result ? RestResponseVO.createBySuccessMessage(StringConst.ADD_SUCCESS,problem)\n                    : RestResponseVO.createByErrorMessage(StringConst.ADD_FAIL);\n        }\n        return RestResponseVO.createByErrorMessage(StringConst.ADD_FAIL);\n    }\n````','<p>2222222222<img src=\"http://file.gkuoj.com/image/ming/blog/1557311340073.jpg\" alt=\"\">\n<pre><code class=\"lang-java\"> @Override\n    @Transactional(rollbackFor = Exception.class)\n    public RestResponseVO insert(ProblemRequest problemRequest) {\n        if (problemRequest == null) {\n            return RestResponseVO.createByErrorEnum(RestResponseEnum.INVALID_REQUEST);\n        }\n        Problem problem = new Problem();\n        BeanUtil.copyPropertiesIgnoreNull(problemRequest,problem);\n        int effect = problemMapper.insertSelective(problem);\n        if (effect &gt; 0) {\n            String tags = problemRequest.getTags();\n            boolean result = insertTags(problem.getId(), tags);\n            return result ? RestResponseVO.createBySuccessMessage(StringConst.ADD_SUCCESS,problem)\n                    : RestResponseVO.createByErrorMessage(StringConst.ADD_FAIL);\n        }\n        return RestResponseVO.createByErrorMessage(StringConst.ADD_FAIL);\n    }\n</code></pre>\n','222222222','22222222222','2222222','2222222222222',4,0,0,0,0,0,0,0,0,222,222,1,'2020-07-21 14:16:50','2020-08-05 10:08:18');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1040,'333333333','3333333333![](http://file.gkuoj.com/image/ming/blog/1557311907081.jpg)\n333333','<p>3333333333<img src=\"http://file.gkuoj.com/image/ming/blog/1557311907081.jpg\" alt=\"\"><br>333333\n','3333333','33333333333','33333','33333333',3,0,0,0,0,0,0,0,0,1000,262144,1,'2020-07-21 14:16:50','2020-08-05 10:08:18');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1041,'22222222','22222','<p>22222</p>\n','22222222','2222','222222','2222222',4,0,0,0,0,0,0,0,0,1000,262144,1,'2020-07-21 14:16:50','2020-08-05 10:08:18');
INSERT INTO `` (`id`,`name`,`content`,`html_content`,`input_desc`,`output_desc`,`testcase_input`,`testcase_output`,`level`,`submit_count`,`ac_count`,`tle_count`,`pe_count`,`me_count`,`re_count`,`ce_count`,`wa_count`,`time`,`memory`,`flag`,`create_time`,`update_time`) VALUES (1042,'观光公交','测试','<p>测试</p>\n','１２３','１２３','１２３','１２３',3,89,59,0,0,0,0,0,0,10000,262144,0,'2020-07-21 14:16:50','2020-08-06 09:21:35');
